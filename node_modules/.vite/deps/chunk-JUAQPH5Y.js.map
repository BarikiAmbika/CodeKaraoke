{
  "version": 3,
  "sources": ["../../vuetify/src/components/VIcon/VIcon.tsx", "../../vuetify/src/composables/color.ts", "../../vuetify/src/composables/size.ts"],
  "sourcesContent": ["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\n\n// Utilities\nimport { shallowRef, Text } from 'vue'\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  opacity: [String, Number],\n\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'VIcon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    const slotIcon = shallowRef<string>()\n\n    const { themeClasses } = useTheme()\n    const { iconData } = useIcon(() => slotIcon.value || props.icon)\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(() => props.color)\n\n    useRender(() => {\n      const slotValue = slots.default?.()\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      }\n      const hasClick = !!(attrs.onClick || attrs.onClickOnce)\n\n      return (\n        <iconData.value.component\n          tag={ props.tag }\n          icon={ iconData.value.icon }\n          class={[\n            'v-icon',\n            'notranslate',\n            themeClasses.value,\n            sizeClasses.value,\n            textColorClasses.value,\n            {\n              'v-icon--clickable': hasClick,\n              'v-icon--disabled': props.disabled,\n              'v-icon--start': props.start,\n              'v-icon--end': props.end,\n            },\n            props.class,\n          ]}\n          style={[\n            {\n              '--v-icon-opacity': props.opacity,\n            },\n            !sizeClasses.value ? ({\n              fontSize: convertToUnit(props.size),\n              height: convertToUnit(props.size),\n              width: convertToUnit(props.size),\n            }) : undefined,\n            textColorStyles.value,\n            props.style,\n          ]}\n          role={ hasClick ? 'button' : undefined }\n          aria-hidden={ !hasClick }\n          tabindex={ hasClick ? props.disabled ? -1 : 0 : undefined }\n        >\n          { slotValue }\n        </iconData.value.component>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n", "// Utilities\nimport { toValue } from 'vue'\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from '@/util'\n\n// Types\nimport type { CSSProperties, MaybeRefOrGetter, Ref } from 'vue'\n\nexport type ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: MaybeRefOrGetter<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const {\n      class: colorClasses,\n      style: colorStyles,\n    } = computeColor(colors)\n\n    return { colorClasses, colorStyles }\n  })\n}\n\nexport function useTextColor (color: MaybeRefOrGetter<ColorValue>): TextColorData {\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(() => ({\n    text: toValue(color),\n  }))\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: MaybeRefOrGetter<ColorValue>): BackgroundColorData {\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(() => ({\n    background: toValue(color),\n  }))\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n\nexport function computeColor (colors: MaybeRefOrGetter<{ background?: ColorValue, text?: ColorValue }>) {\n  const _colors = toValue(colors)\n  const classes: string[] = []\n  const styles: CSSProperties = {}\n\n  if (_colors.background) {\n    if (isCssColor(_colors.background)) {\n      styles.backgroundColor = _colors.background\n\n      if (!_colors.text && isParsableColor(_colors.background)) {\n        const backgroundColor = parseColor(_colors.background)\n        if (backgroundColor.a == null || backgroundColor.a === 1) {\n          const textColor = getForeground(backgroundColor)\n\n          styles.color = textColor\n          styles.caretColor = textColor\n        }\n      }\n    } else {\n      classes.push(`bg-${_colors.background}`)\n    }\n  }\n\n  if (_colors.text) {\n    if (isCssColor(_colors.text)) {\n      styles.color = _colors.text\n      styles.caretColor = _colors.text\n    } else {\n      classes.push(`text-${_colors.text}`)\n    }\n  }\n\n  return { class: classes, style: styles }\n}\n", "// Utilities\nimport { convertToUnit, destructComputed, getCurrentInstanceName, includes, propsFactory } from '@/util'\n\n// Types\nconst predefinedSizes = ['x-small', 'small', 'default', 'large', 'x-large']\n\nexport interface SizeProps {\n  size?: string | number\n}\n\n// Composables\nexport const makeSizeProps = propsFactory({\n  size: {\n    type: [String, Number],\n    default: 'default',\n  },\n}, 'size')\n\nexport function useSize (\n  props: SizeProps,\n  name = getCurrentInstanceName(),\n) {\n  return destructComputed(() => {\n    const size = props.size\n    let sizeClasses\n    let sizeStyles\n    if (includes(predefinedSizes, size)) {\n      sizeClasses = `${name}--size-${size}`\n    } else if (size) {\n      sizeStyles = {\n        width: convertToUnit(size),\n        height: convertToUnit(size),\n      }\n    }\n    return { sizeClasses, sizeStyles }\n  })\n}\n"],
  "mappings": "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",
  "names": ["useColor", "colors", "destructComputed", "class", "colorClasses", "style", "colorStyles", "computeColor", "useTextColor", "color", "textColorClasses", "textColorStyles", "text", "toValue", "useBackgroundColor", "backgroundColorClasses", "backgroundColorStyles", "background", "_colors", "classes", "styles", "isCssColor", "backgroundColor", "isParsableColor", "parseColor", "a", "textColor", "getForeground", "caretColor", "push", "predefinedSizes", "makeSizeProps", "propsFactory", "size", "type", "String", "Number", "default", "useSize", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "destructComputed", "sizeClasses", "sizeStyles", "includes", "width", "convertToUnit", "height", "makeVIconProps", "propsFactory", "color", "String", "disabled", "Boolean", "start", "end", "icon", "IconValue", "opacity", "Number", "makeComponentProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "VIcon", "genericComponent", "name", "props", "setup", "_ref", "attrs", "slots", "slotIcon", "shallowRef", "themeClasses", "useTheme", "iconData", "useIcon", "value", "sizeClasses", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "useRender", "slotValue", "default", "flattenFragments", "filter", "node", "type", "Text", "children", "hasClick", "onClick", "onClickOnce", "_createVNode", "component", "_normalizeClass", "class", "_normalizeStyle", "fontSize", "convertToUnit", "size", "height", "width", "undefined", "style"]
}
